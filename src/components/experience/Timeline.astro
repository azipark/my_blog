---
import type { Experience } from '~/types'

interface Props {
  experiences: Experience[]
}

const { experiences } = Astro.props

// Sort experiences by date in descending order (newest first)
const sortedExperiences = experiences.sort((a, b) => {
  const dateA = a.endDate === 'Present' ? new Date() : new Date(a.endDate)
  const dateB = b.endDate === 'Present' ? new Date() : new Date(b.endDate)
  return dateB.getTime() - dateA.getTime()
})

function formatDate(dateString: string): string {
  if (dateString === 'Present') return 'Present'
  const date = new Date(dateString)
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })
}

function calculateDuration(startDate: string, endDate: string): string {
  const start = new Date(startDate)
  const end = endDate === 'Present' ? new Date() : new Date(endDate)
  
  // 년, 월 차이 계산
  let years = end.getFullYear() - start.getFullYear()
  let months = end.getMonth() - start.getMonth()
  
  // 일자를 고려한 조정
  if (end.getDate() < start.getDate()) {
    months--
  }
  
  // 음수 월 처리
  if (months < 0) {
    years--
    months += 12
  }
  
  // 총 개월 수 계산
  const totalMonths = years * 12 + months
  
  if (totalMonths === 0) {
    return 'Less than 1 month'
  } else if (totalMonths < 12) {
    return `${totalMonths} month${totalMonths > 1 ? 's' : ''}`
  } else {
    let result = `${years} year${years > 1 ? 's' : ''}`
    if (months > 0) {
      result += ` ${months} month${months > 1 ? 's' : ''}`
    }
    return result
  }
}

function getEmploymentTypeText(employmentType?: string): string {
  switch (employmentType) {
    case 'full-time':
      return '정규직'
    case 'part-time':
      return '파트타임'
    case 'contract':
      return '계약직'
    case 'freelance':
      return '프리랜서'
    case 'internship':
      return '인턴'
    default:
      return ''
  }
}

function getEmploymentTypeColor(employmentType?: string): string {
  switch (employmentType) {
    case 'full-time':
      return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
    case 'part-time':
      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
    case 'contract':
      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
    case 'freelance':
      return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'
    case 'internship':
      return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
  }
}
---

<div class="relative">
  <!-- Timeline line -->
  <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-primary/30 via-primary/60 to-primary/30"></div>
  
  <div class="space-y-12">
    {sortedExperiences.map((experience, index) => (
      <div class="relative flex items-start gap-8 group">
        <!-- Timeline dot -->
        <div class="relative z-10 flex-shrink-0">
          <div class={`w-4 h-4 rounded-full border-2 transition-all duration-300 group-hover:scale-125 ${
            experience.type === 'work' 
              ? 'bg-blue-500 border-blue-300 group-hover:bg-blue-400' 
              : 'bg-green-500 border-green-300 group-hover:bg-green-400'
          }`}>
          </div>
          <!-- Ring effect around dot -->
          <div class={`absolute inset-0 rounded-full animate-ping opacity-20 ${
            experience.type === 'work' ? 'bg-blue-500' : 'bg-green-500'
          }`} style="animation-duration: 3s;"></div>
        </div>

        <!-- Experience card -->
        <div class="flex-1 bg-muted/50 hover:bg-muted/80 transition-all duration-300 rounded-lg p-6 shadow-sm hover:shadow-md border border-border/50 hover:border-border group-hover:translate-x-2">
          <div class="flex flex-col sm:flex-row sm:items-start justify-between gap-4 mb-4">
            <div class="flex-1">
              <div class="flex items-center gap-3 mb-2">
                <div class="flex items-center gap-2">
                  <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    experience.type === 'work' 
                      ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' 
                      : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                  }`}>
                    <span class={`w-2 h-2 rounded-full mr-1.5 ${
                      experience.type === 'work' ? 'bg-blue-400' : 'bg-green-400'
                    }`}></span>
                    {experience.type === 'work' ? 'Work' : 'Education'}
                  </span>
                  {experience.type === 'work' && experience.employmentType && (
                    <span class={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getEmploymentTypeColor(experience.employmentType)}`}>
                      {getEmploymentTypeText(experience.employmentType)}
                    </span>
                  )}
                </div>
              </div>
              
              <div class="flex items-start justify-between mb-3">
                {experience.type === 'work' ? (
                  // Work: Show organization as main title, position as subtitle
                  <div>
                    <h3 class="text-base font-semibold text-foreground group-hover:text-primary transition-colors leading-tight">
                      {experience.organization}
                    </h3>
                    <p class="text-sm font-medium text-muted-foreground mt-1">
                      {experience.title}
                    </p>
                  </div>
                ) : (
                  // Education: Show title (degree/major) as main title, organization as subtitle
                  <div>
                    <h3 class="text-base font-semibold text-foreground group-hover:text-primary transition-colors leading-tight">
                      {experience.title}
                    </h3>
                    <p class="text-sm font-medium text-muted-foreground mt-1">
                      {experience.organization}
                    </p>
                  </div>
                )}
                
                <div class="flex items-center gap-2 text-xs text-muted-foreground font-medium bg-muted/30 px-2 py-1 rounded-full border border-border/30">
                  <span class="icon-[ph--calendar] w-3 h-3"></span>
                  {formatDate(experience.startDate)} - {formatDate(experience.endDate)}
                </div>
              </div>
              
              {experience.location && (
                <div class="mb-3">
                  <p class="text-xs text-muted-foreground/70 flex items-center gap-1">
                    <span class="icon-[ph--map-pin] w-3 h-3"></span>
                    {experience.location}
                  </p>
                </div>
              )}
              
              {experience.description && (
                <p class="text-xs text-muted-foreground leading-relaxed mb-4">
                  {experience.description}
                </p>
              )}
              
              {experience.skills && experience.skills.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {experience.skills.map((skill) => (
                    <span class="text-xs px-2 py-1 bg-accent/20 text-accent-foreground rounded-full border border-accent font-medium shadow-sm bg-white/80 dark:bg-black/30">
                      {skill}
                    </span>
                  ))}
                </div>
              )}
            </div>

            <div class="text-right flex-shrink-0">
              {experience.type === 'work' && (
                <div class="text-xs text-muted-foreground/70 mt-1">
                  {calculateDuration(experience.startDate, experience.endDate)}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div> 